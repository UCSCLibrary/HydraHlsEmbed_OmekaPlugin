<?php
class AvalonVideoPlugin extends Omeka_Plugin_AbstractPlugin
{
    const DEFAULT_VIEWER_WIDTH = 640;
    const DEFAULT_VIEWER_HEIGHT = 480;
    
    protected $_hooks = array('install',
    'uninstall',
    'config_form',
    'config',
			      //			      'admin_head',
    'public_avalon_video',
    );

    protected function _addAvalonMeta($itemId,$avalonId){
      $avalonBase = "http://avalon.library.ucsc.edu/media_objects/";
      $currentElementText = get_db()->getTable('ElementText')->findBy(array('element_id'=>484, 'record_id' =>$itemId ));
      foreach($currentElementText as $killthis)
	$killthis->delete();
      $meta = new ElementText();
      $meta->record_id = $itemId;
      $meta->record_type = "Item";
      $meta->element_id = 484;
      $meta->html = false;
      $meta->setText($avalonBase.$avalonId);
      $meta->save();
    }
    /*    
    public function hookAdminHead() {
      if(!isset($_GET['importavalon']))
      //  if(true)
	return;

      $count=0;
      $xml_string = file_get_contents('http://avalon.library.ucsc.edu:8983/solr/avalon/select?q=Grateful&rows=322');
      $xml = new Zend_Config_Xml($xml_string);
      $xmlArray = $xml->result->toArray();

      foreach($xmlArray['doc'] as $doc){
	set_time_limit(30);
	$avalonId = false;
	$avalonSectionId = false;
	$gdaoId = false;
	$parsedGdaoId = false;
	foreach ($doc as $tag => $value) {
	  if($tag=="arr"){
	    foreach($value as $prop) {
	      if(isset($prop['name']) && $prop['name'] == "section_pid_tesim") {
		$avalonSectionId = $prop['str'];
	      }elseif(isset($prop['name']) && $prop['name'] == "id") {
		$avalonId = $prop['str'];
	      }elseif(isset($prop['name']) && $prop['name'] == "mods_tesim") {
		$mods = $prop['str'];
		foreach($mods as $modsElement){
		    if(strpos($modsElement,'gdao.org/items/show/')!==FALSE)
		    $parsedGdaoId = explode('/show/',$modsElement);
		}
	      }
	    }
	    $gdaoId = $parsedGdaoId[1];
	    $avalonId = $avalonSectionId ? $avalonSectionId : $avalonId;
	    $this->_addAvalonMeta($gdaoId,$avalonId);
	    echo($gdaoId.$avalonId."<br>");
	    $count++;
	  }
	}
      }
    }
*/      
    public function hookInstall()
    {
	    set_option('avalon_width_public', AvalonVideoPlugin::DEFAULT_VIEWER_WIDTH);
        set_option('avalon_height_public', AvalonVideoPlugin::DEFAULT_VIEWER_HEIGHT);

        $db = get_db();

	// Don't install if an element set named "Avalon Video" already exists.
  if ($db->getTable('ElementSet')->findByName('Avalon Video')) {
          throw new Exception('An element set by the name "Avalon Video" already exists. You must delete that '
                         . 'element set to install this plugin.');
}

		$elementSetMetadata = array(
			'record_type'        => "Item", 
			'name'        => "Avalon Video", 
			'description' => "Elements needed for streaming video for the AvalonVideo Plugin"
		);
		$elements = array(
			array(
				'name'           => "Avalon Section PURL",
				'description'    => "PURL for the Avalon Video to embed in an iframe."
			), 
			array(
				'name'           => "Avalon Width",
				'description'    => "Override Width for the iframe width parameter."
			),
			array(
				'name'           => "Avalon Height",
				'description'    => "Override Height for the iframe height parameter."
			)
			// etc.
		);
	insert_element_set($elementSetMetadata, $elements);
    }
    
    public  function hookUninstall()
    {
	    delete_option('avalon_width_public');
        delete_option('avalon_height_public');
        if ($elementSet = get_db()->getTable('ElementSet')->findByName("Avalon Video")) {
            $elementSet->delete();
        }
    }
	
    /**
* Appends a warning message to the uninstall confirmation page.
*/
    public static function admin_append_to_plugin_uninstall_message()
    {
        echo '<p><strong>Warning</strong>: This will permanently delete the Avalon Video element set and all its associated metadata. You may deactivate this plugin if you do not want to lose data.</p>';
    }
	
    public function hookConfigForm()
    {
        include 'config_form.php';
    }
    
    public function hookConfig()
    {
        if (!is_numeric($_POST['avalon_width_public']) ||
        !is_numeric($_POST['avalon_height_public'])) {
            throw new Omeka_Validator_Exception('The width and height must be numeric.');
        }
        set_option('avalon_width_public', $_POST['avalon_width_public']);
        set_option('avalon_height_public', $_POST['avalon_height_public']);
    }
    
    public function hookPublicAvalonVideo($args)
    {
        $this->append($args);
?>
	  <script>
	     jQuery(document).ready(function() {jQuery('#exhibit-content').find('h1').after(jQuery('#avalon_player'));});
	//	     jQuery(document).ready(function() {jQuery('.item.show #fields-primary').prepend(jQuery('#avalon_player'));});
	</script>
<?php
    }
  
    public function append($args)
    { 
      if ($avalonUrl = metadata('item',array('Avalon Video','Avalon Section PURL'))) {      
	$width =  get_option('avalon_width_public');
	$height =  get_option('avalon_height_public');
	if($itemHeight = metadata('item',array('Avalon Video','Avalon Height')))
	  $height = $itemHeight;
	if($itemWidth = metadata('item',array('Avalon Video','Avalon Width')))
	  $width = $itemWidth;
	if(isset($args['height'])) 	
	  $height = $args['height'];
	if(isset($args['width'])) 	
	  $width = $args['width'];
	
	$urlParts = explode(':',$avalonUrl);
	$avalon_id = end($urlParts);
	$urlParts = explode('/',$avalonUrl);
	$avalon_host = $urlParts[2];
?> <div id="avalon_player" style= "margin:0 auto;">
      <iframe style="margin:0 auto;" src="//<?php echo $avalon_host;?>/master_files/avalon:<?php echo $avalon_id;?>/embed" width=<?php echo $width;?> height=<?php echo $height;?> frameborder=0 webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
   </div>
<?php
      } 
    } 
 } ?>
